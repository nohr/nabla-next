/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    box1: THREE.Mesh;
  };
};

export function Box(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("/models/box.gltf") as unknown as GLTFResult;

  const material = new THREE.MeshPhysicalMaterial({
    // wireframe: true,
    //   color: state.theme === "light" ? state.light.CD : state.dark.CD,
    color: "white",
    reflectivity: 1,
    //   roughness: state.theme === "light" ? state.light.CDRough : state.dark.CDRough,
    roughness: 0.5,
    metalness: 0.2,
    opacity: 1,
    clearcoat: 0.8,
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.box1.geometry}
        material={material}
        userData={{ name: "box.1" }}
      />
    </group>
  );
}

useGLTF.preload("/box.gltf");
